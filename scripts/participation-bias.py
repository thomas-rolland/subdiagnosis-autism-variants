#!/bin/python3
# Author: Thomas Rolland	jerikoo75@gmail.com
# Date: 03/31/2022

import pandas as pd
import numpy as np
import statsmodels.stats as sm
from plotnine import *
import scipy.stats as st

#===================================================================================================
# participation-bias.py
# Measures odds ratio of participation when carrying variant
#
# Input files and required columns (and corresponding variable format or accepted values):
# - individuals.tsv = required columns 'IID' (str), 'FID' (str), 'status' ('case' or 'control'), 'sex' ('1.0' or '2.0'), 'age' (int), 'SITE' (category), 'PC1' to 'PC4' (float), 'ASD_PRS' (float), 'scq' (float), 'IQ_score' (float), "F1" to "F6" (float), "walked" (float), "smiled" (float), "words" (float), "crawled" (float), "sat" (float), "combined_words" (float), 'income' (category), 'qualification' (category), 'townsend_index' (float), 'fluid_intelligence' (float), 'total_area_z_scored' (float), 'total_thickness_z_scored' (float), 'total_volume_z_scored' (float)
# - variants.tsv = required columns 'IID' (str), 'FID' (str), 'chr:pos:ref:alt' (str), 'gene' (str)
# - autism-OR.tsv = as generated by autism-OR.py script
# NOTE1: Individuals file MUST BE restricted to UK-Biobank individuals
# NOTE2: The participation bias for imaging is measured on individuals with available total_area_z_scored values
#
# Output files
# - participation-bias.tsv = odds ratio for respondents over non-respondents and corresponding 95% CI, p-value and corrected p-value
# - participation-bias.pdf = Plot of odds ratios and 95% CIs of participation
#===================================================================================================



##############################################################################################################################
######################################################### Parameters #########################################################
##############################################################################################################################

individuals = pd.read_csv("individuals.tsv", sep = "\t", header = 0, dtype = {'FID': 'str', 'IID': 'str', "income":'category', 'qualification': 'category'})
variants = pd.read_csv("variants.tsv", sep = "\t", header = 0, dtype = {'FID': 'str', 'IID': 'str'})
autismOR = pd.read_csv("autism-OR.tsv", sep = "\t", dtype = str, header = 0)

output_participation_tsv = "participation-bias.tsv"
output_participation_pdf = "participation-bias.pdf"


###################################################################################################################################################
########################################## Testing whether there are more carriers among non-respondents ##########################################
###################################################################################################################################################

print (">>>>>>>>>>> Annotating individuals with the variants they carry and the corresponding autism-OR ...")
individuals = individuals.reset_index(drop = True)
individuals["has_variant"] = "No"
individuals["gene"] = "none"
individuals["autism-OR"] = 0
for index, row in individuals[individuals["IID"].isin(variants["IID"]) == True].iterrows():
	if variants[variants["IID"].isin(pd.Series(row["IID"])) == True].shape[0] > 0:
		genes = list(variants["gene"][variants["IID"].isin(pd.Series(row["IID"])) == True].unique())
		if autismOR["autism-OR"][autismOR["gene"].isin(pd.Series(genes)) == True].nunique() == 0:
			continue
		# Mapping the variant associated to the highest autism-OR
		max_autismOR = max(list(autismOR["autism-OR"][autismOR["gene"].isin(pd.Series(genes)) == True]))
		gene = list(autismOR["gene"][(autismOR["gene"].isin(pd.Series(genes)) == True) & (autismOR["autism-OR"] == max_autismOR)].unique())[0]
		individuals.loc[index, 'has_variant'] = "Yes"
		individuals.loc[index, 'gene'] = gene
		individuals.loc[index, 'autism-OR'] = max_autismOR

print (">>>>>>>>>>> Testing whether there are more carriers among non-respondents ...")
df = pd.DataFrame()
for feature in ["income", "qualification", "fluid_intelligence", "total_area_z_scored"]:
	a = individuals[(individuals["has_variant"] == "Yes") & (individuals[feature].isnull() == False)].shape[0]
	b = individuals[(individuals["has_variant"] == "No") & (individuals[feature].isnull() == False)].shape[0]
	c = individuals[(individuals["has_variant"] == "Yes") & (individuals[feature].isnull() == True)].shape[0]
	d = individuals[(individuals["has_variant"] == "No") & (individuals[feature].isnull() == True)].shape[0]
	test = st.fisher_exact(np.array([[a, b], [c, d]]))
	lCI = np.exp(np.log(test[0]) - 1.96 * np.sqrt((1/a) + (1/b) + (1/c) + (1/d)))
	uCI = np.exp(np.log(test[0]) + 1.96 * np.sqrt((1/a) + (1/b) + (1/c) + (1/d)))
	chunk = pd.concat([pd.Series(feature), pd.Series(test[0]), pd.Series(lCI), pd.Series(uCI), pd.Series(test[1])], axis = 1)
	df = pd.concat([df, chunk])
df.columns = ["feature", "OR", "CI_5", "CI_95", "p"]

df["p_adj"] = sm.multitest.multipletests(list(df["p"]), method = "fdr_bh", alpha = 0.05)[1]
# df.loc[df["p"].isnull() == False, "p_adj"] = sm.multitest.multipletests(list(df["p"][df["p"].isnull() == False]), method = "fdr_bh", alpha = 0.05)[1]

df.to_csv(output_participation_tsv, sep = "\t", header = True, index = False)

print (">>>>>>>>>>> Plotting odds ratios ...")
df = pd.read_csv(output_participation_tsv, sep = "\t", header = 0)
for index, row in df.iterrows():
	df.loc[index, "p_adj"] = "p=" + str("{:.2e}".format(row["p_adj"]))
plot = ggplot(df, aes(x = 'feature', y = 'OR')) + geom_point() + ylab("OR of participation when carrying variant") + scale_y_continuous(limits = [0.5, 1.5]) + geom_hline(yintercept = 1, linetype = "dashed") + geom_linerange(aes(ymin = "CI_5", ymax = "CI_95")) + geom_text(aes(y = 1.2, label = "p_adj")) + coord_flip() + theme_matplotlib(rc={'pdf.fonttype':42})
plot.save(output_participation_pdf, height = 8, width = 8)
