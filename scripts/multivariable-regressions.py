#!/bin/python3
# Author: Thomas Rolland	jerikoo75@gmail.com
# Date: 03/31/2022

import pandas as pd
from numpy import mean, std
from plotnine import *
import statsmodels.stats as sm
from statsmodels.miscmodels.ordinal_model import OrderedModel
from statsmodels.formula.api import ols

#===================================================================================================
# multivariable-regressions.py
# Perform multivariable regressions on autism-related traits and socio-demographic traits
# NOTE FOR STATSMODELS: Installing no-deps statsmodel module is necessary to run from_formula() function (pip install --upgrade --no-deps statsmodels)
#
# Input files and required columns (and corresponding variable format or accepted values):
# - individuals.tsv = required columns 'IID' (str), 'FID' (str), 'status' ('case' or 'control'), 'sex' ('1.0' or '2.0'), 'age' (int), 'SITE' (category), 'PC1' to 'PC4' (float), 'ASD_PRS' (float), 'scq' (float), 'IQ_score' (float), "F1" to "F6" (float), "walked" (float), "smiled" (float), "words" (float), "crawled" (float), "sat" (float), "combined_words" (float), 'income' (category), 'qualification' (category), 'townsend_index' (float), 'fluid_intelligence' (float), 'total_area_z_scored' (float), 'total_thickness_z_scored' (float), 'total_volume_z_scored' (float)
# - variants.tsv = required columns 'IID' (str), 'FID' (str), 'chr:pos:ref:alt' (str), 'gene' (str)
# - autism-OR.tsv = as generated by autism-OR.py script
#
# Output files
# - regressions_autism_sociodemo.tsv = beta, 95% CI, p-value and corrected p-value for each covariate of each regression involving autism-related and socio-demographic traits
# - regressions_brain_anatomy.tsv = beta, 95% CI, p-value and corrected p-value for each covariate of each regression involving cortical traits
# - regressions_autism_traits.pdf = Plot of betas, 95% CI and corrected p-value for regressions on autism-related traits
# - regressions_dev_milestones.pdf = Plot of betas, 95% CI and corrected p-value for regressions on milestones
# - regressions_sociodemo.pdf = Plot of betas, 95% CI and corrected p-value for regressions on socio-demographic traits
# - regressions_brain_anatomy.pdf = Plot of betas, 95% CI and corrected p-value for regressions on cortical traits
#===================================================================================================



##############################################################################################################################
######################################################### Parameters #########################################################
##############################################################################################################################

individuals = pd.read_csv("individuals.tsv", sep = "\t", header = 0, dtype = {'FID': 'str', 'IID': 'str', "income":'category', 'qualification': 'category'})
variants = pd.read_csv("variants.tsv", sep = "\t", header = 0, dtype = {'FID': 'str', 'IID': 'str'})
autismOR = pd.read_csv("autism-OR.tsv", sep = "\t", dtype = str, header = 0)

autismOR_thresholds = [0, 10, "inf"]

output_autism_sociodemo_regressions_tsv = "regressions_autism_sociodemo.tsv"
output_brain_anatomy_regressions_tsv = "regressions_brain_anatomy.tsv"
output_regressions_pdf = "regressions_"


#####################################################################################################################
########################################## Mapping variants to individuals ##########################################
#####################################################################################################################

print (">>>>>>>>>>> Filtering variants in genes with calculated autism-OR ...")
variants = variants[(variants["gene"].isin(pd.Series(autismOR["gene"])) == True)]

print (">>>>>>>>>>> Filtering individuals with available sex and ASD-PRS ...")
individuals = individuals[(individuals["sex"].astype("str") == "1.0") | (individuals["sex"].astype("str") == "2.0")]
individuals = individuals[(individuals["ASD_PRS"].isnull() == False)]

print (">>>>>>>>>>> Annotating individuals with the variants they carry and the corresponding autism-OR ...")
individuals = individuals.reset_index(drop = True)
individuals["has_variant"] = "No"
individuals["gene"] = "none"
individuals["autism-OR"] = 0
for index, row in individuals[individuals["IID"].isin(variants["IID"]) == True].iterrows():
	if variants[variants["IID"].isin(pd.Series(row["IID"])) == True].shape[0] > 0:
		genes = list(variants["gene"][variants["IID"].isin(pd.Series(row["IID"])) == True].unique())
		if autismOR["autism-OR"][autismOR["gene"].isin(pd.Series(genes)) == True].nunique() == 0:
			continue
		# Mapping the variant associated to the highest autism-OR
		max_autismOR = max(list(autismOR["autism-OR"][autismOR["gene"].isin(pd.Series(genes)) == True]))
		gene = list(autismOR["gene"][(autismOR["gene"].isin(pd.Series(genes)) == True) & (autismOR["autism-OR"] == max_autismOR)].unique())[0]
		individuals.loc[index, 'has_variant'] = "Yes"
		individuals.loc[index, 'gene'] = gene
		individuals.loc[index, 'autism-OR'] = max_autismOR

print (">>>>>>>>>>> Formatting columns...")
individuals['status'] = individuals['status'].astype('category')
individuals['status'] = individuals['status'].cat.reorder_categories(['control', 'case'], ordered=True)
individuals['income'] = individuals['income'].astype('category')
individuals['income'] = individuals['income'].cat.reorder_categories(['Less than 18,000', '18,000 to 30,999', '31,000 to 51,999', '52,000 to 100,000', 'Greater than 100,000'], ordered=True)
individuals['qualification'] = individuals['qualification'].astype('category')
individuals['qualification'] = individuals['qualification'].cat.reorder_categories(['CSEs or equivalent', 'O levels/GCSEs or equivalent', 'NVQ or HND or HNC or equivalent', 'A levels/AS levels or equivalent', 'College or University degree'], ordered=True)
individuals['fluid_intelligence'] = individuals['fluid_intelligence'].astype(float)
individuals['townsend_index'] = -individuals['townsend_index'].astype(float)
individuals['autism-OR'] = individuals['autism-OR'].astype(float)
individuals['age'] = individuals['age'].astype(float)
individuals["scq"] = individuals['scq'].astype(float)
for factor in range(1, 7):
    individuals["F" + str(factor)] = individuals["F" + str(factor)].astype(float)
individuals["IQ_score"] = individuals['IQ_score'].astype(float)
for feature in ["walked", "smiled", "words", "crawled", "sat", "combined_words"]:
    individuals[feature] = individuals[feature].astype(float)
for variable in ["has_variant", "sex"]:
	individuals[variable] = individuals[variable].astype('category')
	individuals[variable] = individuals[variable].cat.codes
for variable in ['PC1', 'PC2', 'PC3', 'PC4', 'ASD_PRS']:
	individuals[variable] = individuals[variable].astype(float)
	individuals[variable] = (individuals[variable] - mean(individuals[variable])) / std(individuals[variable])

regressions = pd.DataFrame()

########################################################################################################################################################
########################################## Performing regressions on autism-related and socio-economic traits ##########################################
########################################################################################################################################################

print (">>>>>>>>>>> Performing regressions on autism-related traits...")
for i in range(0, len(autismOR_thresholds) - 1):
	autismOR = autismOR_thresholds[i]

	# Model for autism status among autism families
	individuals_tmp = individuals[(individuals["has_variant"].astype(str) == "0") | ((individuals["autism-OR"] > autismOR_thresholds[i]) & (individuals["autism-OR"] <= float(autismOR_thresholds[i + 1])))].copy()
	individuals_tmp = individuals_tmp[individuals_tmp["cohort"].isin(pd.Series(["SSC", "SPARK_v1", "SPARK_v2"])) == True]
	model_fit = OrderedModel.from_formula('status ~ C(has_variant) * ASD_PRS + C(sex) + PC1 + PC2 + PC3 + PC4', data=individuals_tmp, distr='logit').fit(method='bfgs')
	ci = model_fit.conf_int(alpha=0.05, cols=None)
	N_C = individuals_tmp["IID"][individuals_tmp["has_variant"].astype("str") == "1"].nunique()
	N_noC = individuals_tmp["IID"][individuals_tmp["has_variant"].astype("str") == "0"].nunique()
	for k in range(0, 4):
		chunk = pd.concat([pd.Series('autism_traits'), pd.Series('autism_status'), pd.Series(autismOR), pd.Series(model_fit.params.index[k]), pd.Series(model_fit.params[k]), pd.Series(ci[0][k]), pd.Series(ci[1][k]), pd.Series(model_fit.pvalues.values[k]), pd.Series(N_C), pd.Series(N_noC)], axis = 1)
		regressions = pd.concat([regressions, chunk])

	# Selecting autistic individuals
	individuals_tmp = individuals_tmp[(individuals_tmp["status"].astype("str") == "case")]

	# Models for autism-related traits among autistic individuals
	for feature in ["scq", "F1", "F2", "F3", "F4", "F5", "F6", "IQ_score"]:
		model_fit = ols(feature + ' ~ C(has_variant) * ASD_PRS + C(sex) + PC1 + PC2 + PC3 + PC4', data=individuals_tmp).fit()
		ci = model_fit.conf_int(alpha=0.05, cols=None)
		N_C = individuals_tmp["IID"][(individuals_tmp[feature].isnull() == False) & (individuals_tmp["has_variant"].astype("str") == "1")].nunique()
		N_noC = individuals_tmp["IID"][(individuals_tmp[feature].isnull() == False) & (individuals_tmp["has_variant"].astype("str") == "0")].nunique()
		for k in range(1, 5):
			chunk = pd.concat([pd.Series('autism_traits'), pd.Series(feature), pd.Series(autismOR), pd.Series(model_fit.params.index[k]), pd.Series(model_fit.params[k]), pd.Series(ci[0][k]), pd.Series(ci[1][k]), pd.Series(model_fit.pvalues.values[k]), pd.Series(N_C), pd.Series(N_noC)], axis = 1)
			regressions = pd.concat([regressions, chunk])
	for feature in ["walked", "smiled", "words", "crawled", "sat", "combined_words"]:
		model_fit = ols(feature + ' ~ C(has_variant) * ASD_PRS + C(sex) + PC1 + PC2 + PC3 + PC4', data=individuals_tmp).fit()
		ci = model_fit.conf_int(alpha=0.05, cols=None)
		N_C = individuals_tmp["IID"][(individuals_tmp[feature].isnull() == False) & (individuals_tmp["has_variant"].astype("str") == "1")].nunique()
		N_noC = individuals_tmp["IID"][(individuals_tmp[feature].isnull() == False) & (individuals_tmp["has_variant"].astype("str") == "0")].nunique()
		for k in range(1, 5):
			chunk = pd.concat([pd.Series('dev_milestones'), pd.Series(feature), pd.Series(autismOR), pd.Series(model_fit.params.index[k]), pd.Series(model_fit.params[k]), pd.Series(ci[0][k]), pd.Series(ci[1][k]), pd.Series(model_fit.pvalues.values[k]), pd.Series(N_C), pd.Series(N_noC)], axis = 1)
			regressions = pd.concat([regressions, chunk])

print (">>>>>>>>>>> Performing regressions on socio-demographic traits...")
for i in range(0, len(autismOR_thresholds) - 1):
	autismOR = autismOR_thresholds[i]
	for feature in ["income", "qualification"]:
		individuals_tmp = individuals[(individuals["has_variant"].astype(str) == "0") | ((individuals["autism-OR"] > autismOR_thresholds[i]) & (individuals["autism-OR"] <= float(autismOR_thresholds[i + 1])))]
		individuals_tmp = individuals_tmp[(individuals_tmp["cohort"].astype("str") == "UKB200k") & (individuals_tmp[feature].isnull() == False)]
		model_fit = OrderedModel.from_formula(feature + ' ~ C(has_variant) * ASD_PRS + C(sex) + age + PC1 + PC2 + PC3 + PC4', data=individuals_tmp, distr='logit').fit(method='bfgs')
		ci = model_fit.conf_int(alpha=0.05, cols=None)
		N_C = individuals_tmp["IID"][(individuals_tmp["has_variant"].astype(str) == "1")].nunique()
		N_noC = individuals_tmp["IID"][(individuals_tmp["has_variant"].astype(str) == "0")].nunique()
		for k in range(0, 4):
			chunk = pd.concat([pd.Series('sociodemo'), pd.Series(feature), pd.Series(autismOR), pd.Series(model_fit.params.index[k]), pd.Series(model_fit.params[k]), pd.Series(ci[0][k]), pd.Series(ci[1][k]), pd.Series(model_fit.pvalues.values[k]), pd.Series(N_C), pd.Series(N_noC)], axis = 1)
			regressions = pd.concat([regressions, chunk])
	for feature in ["fluid_intelligence", "townsend_index"]:
		individuals_tmp = individuals[(individuals["has_variant"].astype(str) == "0") | ((individuals["autism-OR"] > autismOR_thresholds[i]) & (individuals["autism-OR"] <= float(autismOR_thresholds[i + 1])))]
		individuals_tmp = individuals_tmp[(individuals_tmp["cohort"].astype("str") == "UKB200k") & (individuals_tmp[feature].isnull() == False)]
		model_fit = ols(feature + ' ~ C(has_variant) * ASD_PRS + C(sex) + age + PC1 + PC2 + PC3 + PC4', data=individuals_tmp).fit()
		ci = model_fit.conf_int(alpha=0.05, cols=None)
		N_C = individuals_tmp["IID"][(individuals_tmp["has_variant"].astype(str) == "1")].nunique()
		N_noC = individuals_tmp["IID"][(individuals_tmp["has_variant"].astype(str) == "0")].nunique()
		for k in range(1, 5):
	   	 chunk = pd.concat([pd.Series('sociodemo'), pd.Series(feature), pd.Series(autismOR), pd.Series(model_fit.params.index[k]), pd.Series(model_fit.params[k]), pd.Series(ci[0][k]), pd.Series(ci[1][k]), pd.Series(model_fit.pvalues.values[k]), pd.Series(N_C), pd.Series(N_noC)], axis = 1)
	   	 regressions = pd.concat([regressions, chunk])
regressions.columns = ["batch", "feature", "autismOR", "covariate", "beta", "CI5", "CI95", "P", "N_C", "N_noC"]

print (">>>>>>>>>>> Correcting p-values for multiple testing...")
regressions["Padj"] = pd.NA
for covariate in ["C(has_variant)[T.1]", "C(sex)[T.1]", "ASD_PRS", "C(has_variant)[T.1]:ASD_PRS"]:
	regressions.loc[(regressions["covariate"] == covariate) & (regressions["feature"].isin(pd.Series(["autism_status", "scq", "F1", "F2", "F3", "F4", "F5", "F6", "IQ_score"])) == True), "Padj"] = sm.multitest.multipletests(list(regressions["P"][(regressions["covariate"] == covariate) & (regressions["feature"].isin(pd.Series(["autism_status", "scq", "F1", "F2", "F3", "F4", "F5", "F6", "IQ_score"])) == True)]), method = "fdr_bh", alpha = 0.05)[1]
	regressions.loc[(regressions["covariate"] == covariate) & (regressions["feature"].isin(pd.Series(["walked", "smiled", "words", "crawled", "sat", "combined_words"])) == True), "Padj"] = sm.multitest.multipletests(list(regressions["P"][(regressions["covariate"] == covariate) & (regressions["feature"].isin(pd.Series(["walked", "smiled", "words", "crawled", "sat", "combined_words"])) == True)]), method = "fdr_bh", alpha = 0.05)[1]
	regressions.loc[(regressions["covariate"] == covariate) & (regressions["feature"].isin(pd.Series(["income", "qualification", "townsend_index", "fluid_intelligence"])) == True), "Padj"] = sm.multitest.multipletests(list(regressions["P"][(regressions["covariate"] == covariate) & (regressions["feature"].isin(pd.Series(["income", "qualification", "townsend_index", "fluid_intelligence"])) == True)]), method = "fdr_bh", alpha = 0.05)[1]

regressions.to_csv(output_autism_sociodemo_regressions_tsv, sep = "\t", header = True, index = False)

print (">>>>>>>>>>> Plot regressions and corrected p-values...")
regressions = pd.read_csv(output_autism_sociodemo_regressions_tsv, sep = "\t", header = 0, dtype = {'autismOR': 'str', "beta":'float', 'CI5':'float', "CI95":'float', "Padj":'float'})
regressions_tmp = regressions[regressions["covariate"].isin(pd.Series(["C(has_variant)[T.1]", "ASD_PRS"])) == True].copy()

regressions_tmp["Text"] = pd.NA
regressions_tmp.loc[regressions_tmp["Padj"] < 0.05, "Text"] = "*"
regressions_tmp.loc[regressions_tmp["Padj"] < 0.01, "Text"] = "**"
regressions_tmp.loc[regressions_tmp["Padj"] < 0.001, "Text"] = "***"

for batch in ["autism_traits", "dev_milestones", "sociodemo"]:
    plot = ggplot(regressions_tmp[regressions_tmp["batch"] == batch]) + aes(x = "feature", y = "beta", color = "autismOR") + geom_hline(yintercept = 0, linetype = "dashed") + geom_point(stat = "identity", position = position_dodge(width = 0.5), size = 3) + geom_linerange(aes(ymin = "CI5", ymax = "CI95"), position = position_dodge(width = 0.5)) + facet_grid("covariate ~ batch", scales = "free") + geom_text(aes(y = "CI95 + abs(CI95) * 0.5", label = "Text", group = "autismOR"), stat = "identity", position = position_dodge(width = 0.5), size = 10) + theme_matplotlib(rc={'pdf.fonttype':42})
    plot.save(output_regressions_pdf + batch + ".pdf", height = 4, width = regressions_tmp[regressions_tmp["batch"] == batch].shape[0]/2.0)


###################################################################################################################################################
########################################## Performing regressions on cortical area, thickness and volume ##########################################
###################################################################################################################################################

print (">>>>>>>>>>> Selecting individuals with required data...")
individuals_tmp = individuals[(individuals["sex"].isnull() == False) & (individuals["age"].isnull() == False) & (individuals["SITE"].isnull() == False) & (individuals["total_volume_z_scored"].isnull() == False)].copy()

print (">>>>>>>>>>> Formatting columns...")
individuals_tmp['age_sq'] = individuals_tmp['age'] * individuals_tmp['age']
individuals_tmp["SITE"] = individuals_tmp["SITE"].astype("category")
individuals_tmp["autismOR"] = individuals_tmp["autism-OR"].astype("float")

print (">>>>>>>>>>> Performing regressions on brain anatomy...")
regressions = pd.DataFrame()
for feature in ["total_area_z_scored", "total_thickness_z_scored", "total_volume_z_scored"]:
    model_fit = ols(feature + ' ~ autismOR + C(sex) + age + age_sq + C(SITE)', data=individuals_tmp).fit()
    ci = model_fit.conf_int(alpha=0.05, cols=None)
    for j in [4]:
        chunk = pd.concat([pd.Series("brain_anatomy"), pd.Series(feature), pd.Series(model_fit.params.index[j]), pd.Series(model_fit.params[j]), pd.Series(ci[0][j]), pd.Series(ci[1][j]), pd.Series(model_fit.pvalues.values[j]), pd.Series(individuals_tmp["IID"][(individuals_tmp["has_variant"].astype(str) == "1")].nunique()), pd.Series(individuals_tmp["IID"][(individuals_tmp["has_variant"].astype(str) == "0")].nunique())], axis = 1)
        regressions = pd.concat([regressions, chunk])
regressions.columns = ["batch", "feature", "covariate", "beta", "CI5", "CI95", "P", "N_C", "N_noC"]

print (">>>>>>>>>>> Correcting p-values for multiple testing...")
regressions["Padj"] = pd.NA
for covariate in ["autismOR"]:
	regressions.loc[(regressions["covariate"] == covariate) & (regressions["feature"].isin(pd.Series(["total_area_z_scored", "total_thickness_z_scored", "total_volume_z_scored"])) == True), "Padj"] = sm.multitest.multipletests(list(regressions["P"][(regressions["covariate"] == covariate) & (regressions["feature"].isin(pd.Series(["total_area_z_scored", "total_thickness_z_scored", "total_volume_z_scored"])) == True)]), method = "fdr_bh", alpha = 0.05)[1]

regressions.to_csv(output_brain_anatomy_regressions_tsv, sep = "\t", header = True, index = False)

print (">>>>>>>>>>> Plot regressions and corrected p-values...")
regressions = pd.read_csv(output_brain_anatomy_regressions_tsv, sep = "\t", header = 0, dtype = {"beta":'float', 'CI5':'float', "CI95":'float', "Padj":'float'})
regressions_tmp = regressions[regressions["covariate"].isin(pd.Series(["autismOR"])) == True].copy()
regressions_tmp["Text"] = pd.NA
regressions_tmp.loc[regressions_tmp["Padj"] < 0.05, "Text"] = "*"
regressions_tmp.loc[regressions_tmp["Padj"] < 0.01, "Text"] = "**"
regressions_tmp.loc[regressions_tmp["Padj"] < 0.001, "Text"] = "***"

for batch in ["brain_anatomy"]:
    plot = ggplot(regressions_tmp[regressions_tmp["batch"] == batch]) + aes(x = "feature", y = "beta") + geom_hline(yintercept = 0, linetype = "dashed") + geom_point(stat = "identity", position = position_dodge(width = 0.5), size = 3) + geom_linerange(aes(ymin = "CI5", ymax = "CI95"), position = position_dodge(width = 0.5)) + facet_grid("covariate ~ batch", scales = "free") + geom_text(aes(y = "CI95 + abs(CI95) * 0.5", label = "Text"), stat = "identity", position = position_dodge(width = 0.5), size = 10) + theme_matplotlib(rc={'pdf.fonttype':42})
    plot.save(output_regressions_pdf + batch + ".pdf", height = 4, width = regressions_tmp[regressions_tmp["batch"] == batch].shape[0])
